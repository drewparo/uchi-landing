class LiquidLiquidSwapBehavior extends LiquidBehavior{static name="liquidliquidSwap";static viewModelEvents={"change:rect":{func:"initialize",once:!0}};static domEvents={mouseenter:"transitionIn",touchstart:"transitionIn",mouseleave:"transitionOut",touchend:"transitionOut"};static appEvents={"after:windowResize":"afterWindowResize"};options(){return{dispImage:null,image1:null,image2:null,imagesRatio:1,intensity1:1,intensity2:1,commonAngle:Math.PI/4,angle1:Math.PI/4,angle2:Math.PI/4,speedIn:1.6,speedOut:1.2,easing:"expo.out",video:!1}}get ui(){return{canvas:"canvas"}}get bindToThis(){return["animate","render"]}initialize(){if(this.isDestroyed)return;var s="varying vec2 vUv;void main() {vUv = uv;gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );}",u="varying vec2 vUv;uniform float dispFactor;uniform float dpr;uniform sampler2D disp;uniform sampler2D texture1;uniform sampler2D texture2;uniform float angle1;uniform float angle2;uniform float intensity1;uniform float intensity2;uniform vec4 res;uniform vec2 parent;mat2 getRotM(float angle) {  float s = sin(angle);  float c = cos(angle);  return mat2(c, -s, s, c);}void main() {  vec4 disp = texture2D(disp, vUv);  vec2 dispVec = vec2(disp.r, disp.g);  vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy) ;  vec2 myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);  vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;  vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);  vec4 _texture1 = texture2D(texture1, distortedPosition1);  vec4 _texture2 = texture2D(texture2, distortedPosition2);  gl_FragColor = mix(_texture1, _texture2, dispFactor);}";const o=this.getOption("image1"),l=this.getOption("image2"),h=this.getOption("dispImage"),m=this.getUI("canvas")[0],c=this.getOption("video"),p=this.getOption("angle1"),g=this.getOption("angle2"),v=this.getOption("intensity1"),f=this.getOption("intensity2"),e=this.view.model.get("rect");if(!(o&&l&&h)){console.warn("One or more images missing for interactive swap on this element",this.view.el);return}this.scene=new THREE.Scene,this.camera=new THREE.OrthographicCamera(e.width/-2,e.width/2,e.height/2,e.height/-2,1,1e3),this.camera.position.z=1,this.renderer=new THREE.WebGLRenderer({canvas:m,antialias:!1,alpha:!0}),this.renderer.setPixelRatio(2),this.renderer.setClearColor(16777215,0),this.renderer.setSize(e.width,e.height),this.renderer.domElement.classList.add("w-full","h-full","absolute","top-0","start-0");var a=new THREE.TextureLoader;a.crossOrigin="";var d=a.load(h,this.render);if(d.magFilter=d.minFilter=THREE.LinearFilter,c){this.IO=new IntersectionObserver(([E])=>{this.isDestroyed||(E.isIntersecting?this.animate():this.raf&&cancelAnimationFrame(this.raf))}),this.IO.observe(this.view.el);var t=document.createElement("video");t.autoplay=!0,t.loop=!0,t.playsInline=!0,t.muted=!0,t.src=o,t.load();var i=document.createElement("video");i.autoplay=!0,i.loop=!0,i.playsInline=!0,i.muted=!0,i.src=l,i.load();var r=new THREE.VideoTexture(t),n=new THREE.VideoTexture(i);r.magFilter=n.magFilter=THREE.LinearFilter,r.minFilter=n.minFilter=THREE.LinearFilter,i.addEventListener("loadeddata",()=>{this.isDestroyed||(i.play(),n=new THREE.VideoTexture(i),n.magFilter=THREE.LinearFilter,n.minFilter=THREE.LinearFilter,this.mat.uniforms.texture2.value=n)},!1),t.addEventListener("loadeddata",()=>{this.isDestroyed||(t.play(),r=new THREE.VideoTexture(t),r.magFilter=THREE.LinearFilter,r.minFilter=THREE.LinearFilter,this.mat.uniforms.texture1.value=r)},!1)}else{var r=a.load(o,this.render),n=a.load(l,this.render);r.magFilter=n.magFilter=THREE.LinearFilter,r.minFilter=n.minFilter=THREE.LinearFilter}this.a1=1,this.a2=1,this.mat=new THREE.ShaderMaterial({uniforms:{intensity1:{type:"f",value:v},intensity2:{type:"f",value:f},dispFactor:{type:"f",value:0},angle1:{type:"f",value:p},angle2:{type:"f",value:g},texture1:{type:"t",value:r},texture2:{type:"t",value:n},disp:{type:"t",value:d},res:{type:"vec4",value:new THREE.Vector4(e.width,e.height,this.a1,this.a2)},dpr:{type:"f",value:window.devicePixelRatio}},vertexShader:s,fragmentShader:u,transparent:!0,opacity:1}),this.geometry=new THREE.PlaneBufferGeometry(e.width,e.height,1),this.object=new THREE.Mesh(this.geometry,this.mat),this.scene.add(this.object),this.next=this.transitionIn,this.previous=this.transitionOut}animate(){this.isDestroyed||(this.raf=requestAnimationFrame(this.animate),this.renderer.render(this.scene,this.camera))}render(){this.isDestroyed||this.renderer.render(this.scene,this.camera)}transitionIn(){gsap.to(this.mat.uniforms.dispFactor,{value:1,duration:this.getOption("speedIn"),ease:this.getOption("easing"),onUpdate:this.render,onComplete:this.render})}transitionOut(){gsap.to(this.mat.uniforms.dispFactor,{value:0,duration:this.getOption("speedOut"),ease:this.getOption("easing"),onUpdate:this.render,onComplete:this.render})}afterWindowResize(){if(this.isDestroyed)return;const s=this.view.model.get("rect");this.object.material.uniforms.res.value=new THREE.Vector4(s.width,s.height,this.a1,this.a2),this.renderer.setSize(s.width,s.height),this.render()}destroy(){this.scene?.remove(this.object),this.scene=null,this.camera=null,this.object=null,this.mat=null,this.raf&&cancelAnimationFrame(this.raf),this.IO&&this.IO.disconnect(),super.destroy()}}window.liquid?.app?window.liquid?.app?.model?.set("loadedBehaviors",[...window.liquid.app.model.get("loadedBehaviors"),LiquidLiquidSwapBehavior]):window.liquid?.loadedBehaviors?.push(LiquidLiquidSwapBehavior);
